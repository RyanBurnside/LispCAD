# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cpp}
decl {\#include <iostream>} {private local
} 

decl {\#include <ecl/ecl.h>} {
  comment {Include the Embeddable Common Lisp lib (compiled for C++)} public global
} 

decl {\#include "CADCanvas.h"} {public global
} 

decl {\#include "CommandLine.h"} {public global
} 

Function {add_line(cl_object x, cl_object y, cl_object x2, cl_object y2)} {open return_type void
} {
  code {ShapePoint a(ecl_to_double(x), ecl_to_double(y));
ShapePoint b(ecl_to_double(x2), ecl_to_double(y2));
Shape temp;
temp = Shape::shape_make_line(a, b, 255, 255, 255);
canvas->drawing_ptr->add_shape(temp);
canvas->redraw();} {}
} 

Function {add_circle(cl_object x, cl_object y, cl_object radius)} {open return_type void
} {
  code {ShapePoint a(ecl_to_double(x), ecl_to_double(y));
Shape temp;
temp = Shape::shape_make_circle(a, ecl_to_double(radius), 255, 255, 255);
canvas->drawing_ptr->add_shape(temp);
canvas->redraw();} {}
} 

Function {add_arc(cl_object start_x, cl_object start_y, cl_object end_x, cl_object end_y, cl_object angle, cl_object angle2)} {open return_type void
} {
  code {ShapePoint start_point(ecl_to_double(start_x), ecl_to_double(start_y));
ShapePoint end_point(ecl_to_double(end_x), ecl_to_double(end_y));
Shape temp;
double a = ecl_to_double(angle);
double a2 = ecl_to_double(angle2);

temp = Shape::shape_make_arc(start_point, end_point, a, a2,
                             255, 255, 255);
                             
canvas->drawing_ptr->add_shape(temp);
canvas->redraw();} {}
} 

Function {test_CB(Fl_Widget* w, void* p)} {open return_type {static void}
} {
  code {std::cout << "test_CB called!" << std::endl;} {}
} 

Function {commandline_CB(Fl_Widget* w, void* data)} {open return_type {static void}
} {
  code {CommandLine* ptr = (CommandLine *)w;
if(ptr->repl_mode)
{
  cl_safe_eval(c_string_to_object(ptr->value()), Cnil, Cnil);
  ptr->value("");
}
else
{
  ptr->readonly(true);
}} {}
} 

Function {commandline_get_string(const std::string& prompt, CommandLine *input)} {
  comment {// Prompt and grab string from commandline} open return_type {std::string}
} {
  code {input->repl_mode = false;

// Lock some widgets here
// ...

Fl_Text_Buffer* buff = echo_area->buffer();

buff->text("");
echo_area->insert(prompt.c_str());
input->readonly(false);
input->activate();
input->value("");

// Now trap user in input
while(! input->readonly())
{
  Fl::wait();
}

// Reactivate other groups here
// ...

std::string return_string = input->value();

// Reset prompt 
buff->text("");
input->value("");
input->readonly(false);
input->repl_mode = true;
return return_string;} {}
} 

Function {get_string(cl_object prompt)} {
  comment {// Request a string from user} open return_type cl_object
} {
  code {std::string val;
std::string string = "";

//get dimension
int j = prompt->string.dim;

//get pointer
ecl_character* selv = prompt->string.self;

//do simple pointer addition
for(int i=0;i<j;i++){
    string += (*(selv+i));
}

val = commandline_get_string(std::string(string), mini_buffer);
val = "\\"" + val + "\\"";
return c_string_to_object(val.c_str());} {}
} 

Function {get_int(cl_object prompt)} {open return_type cl_object
} {
  code {std::string val;
std::string string = "";

//get dimension
int j = prompt->string.dim;

//get pointer
ecl_character* selv = prompt->string.self;

//do simple pointer addition
for(int i=0;i<j;i++){
    string += (*(selv+i));
}

val = commandline_get_string(std::string(string), mini_buffer);

return ecl_make_int(std::atoi(val.c_str()));} {}
} 

Function {get_double(cl_object prompt)} {open return_type cl_object
} {
  code {std::string val;
std::string string = "";

//get dimension
int j = prompt->string.dim;

//get pointer
ecl_character* selv = prompt->string.self;

//do simple pointer addition
for(int i=0;i<j;i++){
    string += (*(selv+i));
}

val = commandline_get_string(std::string(string), mini_buffer);

return ecl_make_double_float(std::atof(val.c_str()));} {}
} 

Function {} {open return_type int
} {
  code {cl_boot(argc, argv);
atexit(cl_shutdown);
std::string loadpath="(load \\"System/SYSTEM Scripts/Setup.lisp\\")";
cl_safe_eval(c_string_to_object(loadpath.c_str()), Cnil, Cnil);} {}
  Fl_Window main_window {
    label LispCAD open
    xywh {754 197 800 630} type Double box UP_BOX hide resizable size_range {640 480 0 0}
  } {
    Fl_Box canvas {
      label CADCanvas
      xywh {0 27 780 488} box FLAT_BOX color 0 when 10 resizable
      class CADCanvas
    }
    Fl_Text_Display echo_area {
      xywh {5 535 790 43} box FLAT_BOX color 52 textcolor 36
      code0 {echo_area->buffer(new Fl_Text_Buffer);}
      code1 {echo_area->scrollbar_width(12);}
      code2 {echo_area->wrap_mode(Fl_Text_Display::WRAP_AT_BOUNDS, 80);}
    }
    Fl_Input mini_buffer {
      callback commandline_CB
      xywh {5 580 790 25} box THIN_DOWN_BOX selection_color 94 align 5 when 10 textfont 4
      class CommandLine
    }
    Fl_Menu_Bar menu_bar {open
      xywh {0 0 800 26} color 50
    } {
      Submenu file_menu {
        label File open
        xywh {0 0 70 21}
      } {
        MenuItem file_new_item {
          label New
          xywh {0 0 36 21}
        }
        MenuItem file_save_item {
          label Save
          xywh {0 0 36 21}
        }
        MenuItem file_save_as_item {
          label {Save As}
          xywh {0 0 36 21}
        }
        MenuItem file_quit_item {
          label Quit
          callback {exit(0);}
          xywh {0 0 36 21}
        }
      }
      Submenu edit_menu {
        label Edit open
        xywh {0 0 70 21}
      } {}
      Submenu lisp_menu {
        label Lisp open
        xywh {0 0 70 21}
      } {
        MenuItem lisp_refresh_scripts_item {
          label {Refresh Scripts}
          xywh {0 0 36 21}
        }
        MenuItem lisp_repl_item {
          label REPL
          user_data 0
          xywh {0 0 36 21}
        }
      }
    }
    Fl_Slider pan_across {
      xywh {0 514 780 19} type {Horz Knob} color 50 selection_color 94
    }
    Fl_Slider pan_vert {
      xywh {780 24 20 491} type {Vert Knob} selection_color 94
    }
  }
  code {// Connect mini_buffer to canvas
canvas->CommandLine_ptr = mini_buffer;} {}
  code {// Register ecl functions
cl_def_c_function(c_string_to_object("add-line"), cl_objectfn_fixed(add_line), 4);
cl_def_c_function(c_string_to_object("add-circle"), cl_objectfn_fixed(add_circle), 3);
cl_def_c_function(c_string_to_object("add-arc"), cl_objectfn_fixed(add_arc), 6);
cl_def_c_function(c_string_to_object("ask-string"), cl_objectfn_fixed(get_string), 1);
cl_def_c_function(c_string_to_object("ask-int"), cl_objectfn_fixed(get_int), 1);
cl_def_c_function(c_string_to_object("ask-double"), cl_objectfn_fixed(get_double), 1);} {selected
  }
  code {main_window->show();} {}
} 
