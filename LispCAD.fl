# data file for the Fltk User Interface Designer (fluid)
version 1.0302 
header_name {.h} 
code_name {.cpp}
decl {\#include <iostream>} {private local
} 

decl {\#include <ecl/ecl.h>} {
  comment {Include the Embeddable Common Lisp lib (compiled for C++)} public global
} 

decl {\#include "CADCanvas.h"} {public global
} 

decl {\#include "CommandLine.h"} {public global
} 

Function {add_line(cl_object x, cl_object y, cl_object x2, cl_object y2)} {open return_type void
} {
  code {ShapePoint a(ecl_to_double(x), ecl_to_double(y));
ShapePoint b(ecl_to_double(x2), ecl_to_double(y2));
Shape temp;
temp = Shape::shape_make_line(a, b, 255, 255, 255);
canvas->drawing_ptr->add_shape(temp);
canvas->redraw();} {}
} 

Function {add_circle(cl_object x, cl_object y, cl_object radius)} {open return_type void
} {
  code {ShapePoint a(ecl_to_double(x), ecl_to_double(y));
Shape temp;
temp = Shape::shape_make_circle(a, ecl_to_double(radius), 255, 255, 255);
canvas->drawing_ptr->add_shape(temp);
canvas->redraw();} {}
} 

Function {test_CB(Fl_Widget* w, void* p)} {open return_type {static void}
} {
  code {std::cout << "test_CB called!" << std::endl;} {}
} 

Function {commandline_CB_wrapper(Fl_Widget* w, void* p)} {open return_type {static void}
} {
  code {CommandLine::call_back(w, p);} {}
} 

Function {get_int()} {open return_type cl_object
} {
  code {return CommandLine::get_input(CommandLine::mode::GET_INT);} {}
} 

Function {} {open
} {
  code {cl_boot(argc, argv);
atexit(cl_shutdown);
std::string loadpath="(load \\"System/SYSTEM Scripts/Setup.lisp\\")";
cl_safe_eval(c_string_to_object(loadpath.c_str()), Cnil, Cnil);} {selected
  }
  Fl_Window main_window {
    label LispCAD open
    xywh {812 315 800 630} type Double box UP_BOX hide resizable size_range {640 480 0 0}
  } {
    Fl_Box canvas {
      label CADCanvas
      xywh {0 33 780 482} box FLAT_BOX color 0 resizable
      class CADCanvas
    }
    Fl_Text_Display echo_area {
      xywh {5 535 790 43} box FLAT_BOX color 52 textcolor 36
      code0 {echo_area->buffer(new Fl_Text_Buffer);}
      code1 {echo_area->scrollbar_width(12);}
      code2 {echo_area->wrap_mode(Fl_Text_Display::WRAP_AT_BOUNDS, 80);}
    }
    Fl_Input mini_buffer {
      callback commandline_CB_wrapper
      xywh {5 580 790 25} box THIN_DOWN_BOX selection_color 94 align 5 when 10 textfont 4
      class CommandLine
    }
    Fl_Menu_Bar menu_bar {open
      xywh {0 0 800 31} color 50
    } {
      Submenu file_menu {
        label File open
        xywh {0 0 70 21}
      } {
        MenuItem file_new_item {
          label New
          xywh {0 0 36 21}
        }
        MenuItem file_save_item {
          label Save
          xywh {0 0 36 21}
        }
        MenuItem file_save_as_item {
          label {Save As}
          xywh {0 0 36 21}
        }
        MenuItem file_quit_item {
          label Quit
          callback {exit(0);}
          xywh {0 0 36 21}
        }
      }
      Submenu edit_menu {
        label Edit open
        xywh {0 0 70 21}
      } {}
      Submenu lisp_menu {
        label Lisp open
        xywh {0 0 70 21}
      } {
        MenuItem lisp_refresh_scripts_item {
          label {Refresh Scripts}
          xywh {0 0 36 21}
        }
        MenuItem lisp_repl_item {
          label REPL
          user_data 0
          xywh {0 0 36 21}
        }
      }
    }
    Fl_Slider pan_across {
      xywh {0 514 780 19} type {Horz Knob} color 50 selection_color 94
    }
    Fl_Slider pan_vert {
      xywh {780 29 20 486} type {Vert Knob} selection_color 94
    }
  }
  code {// Register ecl functions
cl_def_c_function(c_string_to_object("add-line"), cl_objectfn_fixed(add_line), 4);
cl_def_c_function(c_string_to_object("add-circle"), cl_objectfn_fixed(add_circle), 3);
cl_def_c_function(c_string_to_object("get-int"), cl_objectfn_fixed(get_int), 0);} {}
  code {main_window->show();} {}
} 
